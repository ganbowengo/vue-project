{"version":3,"sources":["webpack:///./src/assets/utils/typeVali.js","webpack:///./src/assets/utils/trans.js","webpack:///./src/assets/js/http.js","webpack:///./src/pages/system/vuex/modules/dictionary.js"],"names":["isType","it","type","toLocaleLowerCase","undefined","Object","prototype","toString","call","__webpack_require__","d","__webpack_exports__","transDictionary","changeCodeToName","changeNameToCode","Dic","store","state","data","transWord","word","key","item","hasOwnProperty","forEach","element","code","name","i","length","Vue","$Message","iview_src_components_message__WEBPACK_IMPORTED_MODULE_0__","VUE_UI_OBJ","STATUS_LIST","MESSAGE_LIST","NULL_TOKEN_URL","jumpLogin","window","location","href","axios","interceptors","request","use","config","token","sessionStorage","getItem","headers","author","indexOf","url","options","params","error","Promise","reject","response","MOCK","result","success","optionsConfig","trans","trnasType","errorMsg","status","message","fplxdm","qybz","mutations","namespaced","getters","actions","commit"],"mappings":"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","file":"static/js/common-21a2ec9a.js","sourcesContent":["/**\n * \n * author ganbowen\n * description 基础类型校验\n * created 2019/05/22 14:34:43\n * \n */\n\n/**\n * 校验数据类型\n * @param {*} it 需要验证的类型\n * @param {String} type 类型的字符串格式\n */\nexport function isType(it, type) {\n    type = type.toLocaleLowerCase()\n    if (type === 'undefined') {\n        return it === undefined\n    }\n    if (type === 'null') {\n        return it === undefined\n    }\n\n    return (Object.prototype.toString.call(it)).toLocaleLowerCase() === (`[object ${type}]`)\n}","/**\n * \n * author ganbowen\n * description 字典转换公共工具函数\n * created 2019/05/22 11:41:41\n * \n */\nimport { isType } from './typeVali'\nimport store from '@system/vuex/modules/dictionary'\nconst Dic = store.state\n/**\n * 将data中的code转换为name的工具函数\n * @param {Object} data 需要转换的对象\n * @param {Array} transWord 需要转换的字段组成的arr\n * @param {Boolean} type 是否保留原字段的值 新添加新字段  默认不保留 不添加\n * @return {} 返回转换过字典的数据\n */\nexport function transDictionary(data = [], transWord = [], type = false) {\n    for (let word of transWord) {\n        for (let key in data) {\n            let item = data[key]\n\n            if (isType(item, 'object')) {\n                if (item.hasOwnProperty(word)) {\n                    Dic[word].forEach(element => {\n                        if (element.code === item[word]) {\n                            data[key][word + `${type ? '-name' : ''}`] = element.name\n                        }\n                    })\n                }\n                for (let i in item) {\n                    let it = item[i]\n                    if (isType(it, 'object') || isType(it, 'array')) {\n                        transDictionary(it, transWord)\n                    }\n                }\n            }\n\n            if (isType(item, 'array') && item.length > 0) {\n                transDictionary(item, transWord)\n            }\n\n            if (key === word && !isType(item, 'object') && !isType(item, 'array')) {\n                Dic[word].forEach(element => {\n                    if (element.code === item[word]) {\n                        data[word + `${type ? '-name' : ''}`] = element.name\n                    }\n                })\n            }\n        }\n    }\n    return data\n}\n\n/**\n * change code to name \n * @param {String|Number} it 转换的字段的code\n * @param {String} word 转换的字段\n * @return {String} 装换后的name\n */\nexport function changeCodeToName(it, word) {\n    for (let key of Dic[word]) {\n        if (it === Dic[word][key].code) {\n            it = Dic[word][key].name\n            break\n        }\n    }\n    return it\n}\n\n/**\n * change name to code\n * @param {String} it 转换的字段的name\n * @param {String} word 转换的字段\n * @return {String|Number} 装换后的code\n */\nexport function changeNameToCode(it, word) {\n    for (let key of Dic[word]) {\n        if (it === Dic[word][key].name) {\n            it = Dic[word][key].code\n            break\n        }\n    }\n    return it\n}","/**\n * \n * author ganbowen\n * description axios 封装文件\n * created 2019/05/4 14:33:09\n * \n */\nimport axios from 'axios'\nimport Vue from 'vue'\nimport { transDictionary } from '../utils/trans'\nimport { Message } from 'iview'\nVue.prototype.$Message = Message\n\nconst VUE_UI_OBJ = new Vue()\nconst BASE_URL = '/frontend'\nconst STATUS_LIST = [401, 403, 500]\nconst MESSAGE_LIST = ['没有访问权限!', 'token错误，请重新登录！', 'token为空，请重新登录！', 'token失效，请重新登录！', 'token验签错误，请重新登录！', 'token超时，请重新登录！']\nconst NULL_TOKEN_URL = ['/sys/token','/sys/login']\nconst jumpLogin = () => { \n    window.location.href = 'login.html' \n}\n\naxios.interceptors.request.use(config => {\n    // 在发送请求之前做些什么\n    let token = sessionStorage.getItem('token')\n    if (token) { // mock 开启时不判断是否有token\n        config.headers.author = token\n    } else {\n        if(NULL_TOKEN_URL.indexOf(config.url) < 0){\n            jumpLogin()\n        }\n    }\n    config.url = BASE_URL + config.url\n    if (config.data && config.data.options) {\n        config.options = config.data.options\n        config.data = config.data.params\n    }\n    return config\n}, error => Promise.reject(error))\n\naxios.interceptors.response.use(response => {\n    // 对响应数据做点什么\n    if (response.config.url === '/frontend/sys/token') {\n        if (MOCK) {\n            response.headers.author = response.headers.author || 'mock'\n        }\n        return response\n    } else {\n        let result = response.data\n        if (!result.success) {\n            VUE_UI_OBJ.$Message.error(result.errorMsg)\n        } else {\n            let optionsConfig = response.config.options\n            if (optionsConfig) {\n                if (result && result.data) {\n                    result.data = transDictionary(result.data, optionsConfig.trans,optionsConfig.trnasType)\n                }\n            }\n        }\n        return result\n    }\n}, error => {\n    // 对响应错误做点什么\n    let response = error.response || {}\n    let data = response.data || {}\n    if (STATUS_LIST.indexOf(response.status) > -1 && MESSAGE_LIST.indexOf(data.message) > -1) {\n        VUE_UI_OBJ.$Message.error(data.message)\n        jumpLogin()\n    }\n    return Promise.reject(error)\n})\n\nexport default axios","const state = {\n    fplxdm: (() => [{\n            name: '二手车销售统一发票',\n            code: '006'\n        },\n        {\n            name: '增值税专用发票',\n            code: '004'\n        },\n        {\n            name: '增值税普通发票',\n            code: '007'\n        },\n        {\n            name: '机动车销售统一发票',\n            code: '005'\n        },\n        {\n            name: '增值税电子普通发票',\n            code: '026'\n        },\n        {\n            name: '增值税普通发票(卷票)',\n            code: '025'\n        }\n    ])(),\n    qybz: (() => [{\n            name: '是',\n            code: '1'\n        },\n        {\n            name: '否',\n            code: '0'\n        }\n    ])()\n}\n\nconst mutations = {\n    fplxdm(state) {},\n    qybz(state) {},\n}\n\nconst actions = {\n    fplxdm: ({\n        commit\n    }) => commit('fplxdm'),\n    qybz: ({\n        commit\n    }) => commit('qybz')\n}\n\nconst getters = {\n    fplxdm: state => state.fplxdm,\n    qybz: state => state.qybz,\n}\n\nexport default {\n    namespaced: true,\n    state,\n    getters,\n    actions,\n    mutations\n}"],"sourceRoot":""}